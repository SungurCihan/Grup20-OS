package Core.Queue;

import java.util.ArrayList;

import Core.Process.ProceessInterruptedModel;
import Core.Process.Process;
import Core.Utilities.Helpers;
import Core.Utilities.Priority;

//Uyglamanýn hayat döngüsü boyunca kullanýlan kuyruk ve dizilerin tutulduðu static sýnýf
public final class QueuePool {	
	//Proseslerin tutulduðu kuyuruklar
	private static Queue RealTimeQueue;	
	private static Queue UserBasedQueue1;
	private static Queue UserBasedQueue2;
	private static Queue UserBasedQueue3;
	
	//O anda yürütülen prosesin tutulduðu deðiþken
	public static Process RunningProcess=null; 
	
	//Askýya alýnmýþ proseslerin tutulduðu dizi
	private static ArrayList<ProceessInterruptedModel> InterruptedProcesses;

	//Getter ve Setterlar
	public static ArrayList<ProceessInterruptedModel> getInterruptedProcesses() {
		return InterruptedProcesses;
	}
	public static void setInterruptedProcesses(ArrayList<ProceessInterruptedModel> interruptedProcesses) {
		InterruptedProcesses = interruptedProcesses;
	}
	public static Queue getRealTimeQueue() {
		return RealTimeQueue;
	}
	public static void setRealTimeQueue(Queue realTimeQueue) {
		RealTimeQueue = realTimeQueue;
	}
	public static Queue getUserBasedQueue1() {
		return UserBasedQueue1;
	}
	public static void setUserBasedQueue1(Queue userBasedQueue1) {
		UserBasedQueue1 = userBasedQueue1;
	}
	public static Queue getUserBasedQueue2() {
		return UserBasedQueue2;
	}
	public static void setUserBasedQueue2(Queue userBasedQueue2) {
		UserBasedQueue2 = userBasedQueue2;
	}
	public static Queue getUserBasedQueue3() {
		return UserBasedQueue3;
	}
	public static void setUserBasedQueue3(Queue userBasedQueue3) {
		UserBasedQueue3 = userBasedQueue3;
	}
	
	//Parametre olarak alýnýn öncelik deðerine göre ilgili kuyruktan veri silen fonksiyon.
	public static void remove(Priority priority) {
		switch(priority) 
		{
		case P0:
			RealTimeQueue.remove();
			break;
		case P1:
			UserBasedQueue1.remove();
			break;
		case P2:
			UserBasedQueue2.remove();
			break;
		case P3:
			UserBasedQueue3.remove();
			break;	
		}
	}
	
	//Parametre olarak alýnýn öncelik deðerine göre ilgili kuyruða 
	//yine parametre olarak aldýðý "Proses" verisini ekleyen fonksiyon.
	public static void add(Core.Process.Process process) {
		switch(process.Priority) 
		{
		case P0:
			RealTimeQueue.add(process);
			break;
		case P1:
			UserBasedQueue1.add(process);
			break;
		case P2:
			UserBasedQueue2.add(process);
			break;
		case P3:
			UserBasedQueue3.add(process);
			break;	
		}
	}
	
	//Kuyruklarýn initialize edildiði fonksiyon.
	public static void InitializeQueue() {
		RealTimeQueue = new Queue();
		UserBasedQueue1 = new Queue();
		UserBasedQueue2 = new Queue();
		UserBasedQueue3 = new Queue();
		InterruptedProcesses = new ArrayList<>();
	}
	
	//Kuyuklarýn içersindeki prosesler varýþ zamanlarýna göre sýralandýðý fonksiyon
	public static void SortAllQueues() {
		Helpers.bubbleSortWithArrivalTime(RealTimeQueue);
		Helpers.bubbleSortWithArrivalTime(UserBasedQueue1);
		Helpers.bubbleSortWithArrivalTime(UserBasedQueue2);
		Helpers.bubbleSortWithArrivalTime(UserBasedQueue3);

	}
	
	//Parametre olarak aldýðý öncelik deðerine göre ilgili kuyruðun ilk elemanýn döndüren fonksiyon
	public static Process GetFirstItem(Priority priority) {
		switch(priority) {
		case P0:
			return RealTimeQueue.getProcess(RealTimeQueue.first);
		case P1:
			return UserBasedQueue1.getProcess(UserBasedQueue1.first);
		case P2:
			return UserBasedQueue2.getProcess(UserBasedQueue2.first);
		case P3:
			return UserBasedQueue3.getProcess(UserBasedQueue3.first);
			default:
				return null;
		}
	}
	
	//Kuyruklarýn hepsinin boþaldýðý, dolayýsýyla 
	//zamanlayýcýnýn vazifesinin noktalandýðýný tespit eden fonkiyon
	public static Boolean CheckIfSchedulerEnded() {
		if(RealTimeQueue.getSize()==0&&
		   UserBasedQueue1.getSize()==0&&
		   UserBasedQueue2.getSize()==0&&
		   UserBasedQueue3.getSize()==0)
			return true;
		return false;
	}
}
