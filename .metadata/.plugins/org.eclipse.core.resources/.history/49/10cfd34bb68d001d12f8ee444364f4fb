package Core.Process;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import Core.Queue.QueuePool;
import Core.Utilities.*;

public class Process {
	public String ProcessId;
	public int ArrivalTime;
	public int BurstTime;
	public Priority Priority; 
	public State State;
	private ProcessBuilder processBuilder;
	
	public Process() {
		this.processBuilder= new ProcessBuilder();
	}
	
	public void ChangeState(State state) {
		this.State=state;
		Print();
	}
	public void Run(int currentTime) throws IOException {
		switch(this.Priority) 
		{
		case P0: //REALTIME
		{
			ChangeState(Core.Utilities.State.RUNNING);
			StartProcess();
			break;
		}
		case P1: //USER - BASED (PRIORITY 1 )
		{
			this.State=Core.Utilities.State.RUNNING;
			StartProcess();
			if(this.BurstTime!=0)
			{
				QueuePool.remove(this.Priority);
				this.Priority=Core.Utilities.Priority.P2;
				QueuePool.add(this);
				ChangeState(Core.Utilities.State.INTERRUPTED);				
				QueuePool.getInterruptedProcesses().add(new ProceessInterruptedModel(this.ProcessId, currentTime, Core.Utilities.Priority.P2));
			}
			SetRunningProcess();
			break;
		}
		case P2:
			ChangeState(Core.Utilities.State.RUNNING);
			StartProcess();
			if(this.BurstTime!=0)
			{
				QueuePool.remove(this.Priority);
				this.Priority=Core.Utilities.Priority.P3;
				QueuePool.add(this);
				ChangeState(Core.Utilities.State.INTERRUPTED);
				if(!IfAlreadyInterrupted(this.ProcessId, currentTime))
					QueuePool.getInterruptedProcesses().add(new ProceessInterruptedModel(this.ProcessId, currentTime, Core.Utilities.Priority.P3));

			}
			SetRunningProcess();
			break;
		case P3:
			ChangeState(Core.Utilities.State.RUNNING);
			StartProcess();
			if(this.BurstTime!=0)
			{
				ChangeState(Core.Utilities.State.INTERRUPTED);
				if(!IfAlreadyInterrupted(this.ProcessId, currentTime))
					QueuePool.getInterruptedProcesses().add(new ProceessInterruptedModel(this.ProcessId, currentTime, Core.Utilities.Priority.P3));
				QueuePool.remove(this.Priority);
				QueuePool.add(this);
				SetRunningProcess();
			}
			break;		
		}
	}
	private void Print() 
	{
		String processInformation="(id:"+this.ProcessId+"    oncelik: "+this.Priority.toString()+"  kalan sure: "+this.BurstTime +" sn)";
		switch(this.State) 
		{
		case INTERRUPTED:
		{
			PrintColored(Constants.MESSAGE_INTERRUPTED+processInformation);
			break;
		}
		case READY:
		{
			PrintColored(Constants.MESSAGE_READY+processInformation);
			break;
		}
		case TERMINATED:
		{
			PrintColored(Constants.MESSAGE_TERMINATED+processInformation);
			break;
		}		
		}
	}
	public void PrintTimeout()
	{
		String processInformation="(id:"+this.ProcessId+"    oncelik: "+this.Priority.toString()+"  kalan sure: "+this.BurstTime +" sn)";
		PrintColored(Constants.MESSAGE_TIMEOUT + processInformation);
	}
	private void StartProcess() throws IOException
	{		
		String processInformation="(id:"+this.ProcessId+"    oncelik: "+this.Priority.toString()+"  kalan sure: "+this.BurstTime +" sn)";
		String message = Constants.MESSAGE_RUNNING+processInformation;
		processBuilder.command("cmd", "/c", "echo "+ message);
		java.lang.Process process = processBuilder.start();
		ReadProcess(process);
		this.BurstTime--;
		if(this.BurstTime==0)
		{
			ChangeState(Core.Utilities.State.TERMINATED);
			QueuePool.remove(this.Priority);
			SetRunningProcess();
			return;
		}

		
	}
	
	private void ReadProcess(java.lang.Process process)
	{
		try (var reader = new BufferedReader(
	            new InputStreamReader(process.getInputStream()))) {

	            String line;

	            while ((line = reader.readLine()) != null) {
	            	PrintColored(line);
	            }

	        }catch(Exception e) {
	        	
	        }
	}
	
	private void PrintColored(String message) {
        System.out.println(Constants.COLOR_SPACE_PREFIX+ this.ProcessId + 1 + "m "+"    " + " "+message+Constants.COLOR_SPACE_SUFFIX);
	}
	
	private void SetRunningProcess() {

		Process firstItemOfRealTimeQueue=QueuePool.GetFirstItem(Core.Utilities.Priority.P0);
		Process firstItemOfUserBased1Queue=QueuePool.GetFirstItem(Core.Utilities.Priority.P1);
		Process firstItemOfUserBased2Queue=QueuePool.GetFirstItem(Core.Utilities.Priority.P2);
		Process firstItemOfUserBased3Queue=QueuePool.GetFirstItem(Core.Utilities.Priority.P3);

		
		
		if(firstItemOfRealTimeQueue!=null&&firstItemOfRealTimeQueue.State==Core.Utilities.State.READY)
			QueuePool.RunningProcess=firstItemOfRealTimeQueue;
		
		else if(firstItemOfUserBased1Queue!=null&&firstItemOfUserBased1Queue.State==Core.Utilities.State.READY)
			QueuePool.RunningProcess=firstItemOfUserBased1Queue;
		
		else if(firstItemOfUserBased2Queue!=null&&
				(firstItemOfUserBased2Queue.State==Core.Utilities.State.READY||
				firstItemOfUserBased2Queue.State==Core.Utilities.State.INTERRUPTED)
				)
			QueuePool.RunningProcess=firstItemOfUserBased2Queue;
		
		else if(firstItemOfUserBased3Queue!=null&&firstItemOfUserBased3Queue.State==Core.Utilities.State.READY)
			QueuePool.RunningProcess=firstItemOfUserBased3Queue;
		
		else
			QueuePool.RunningProcess=null;
	}
	
	private boolean IfAlreadyInterrupted(String processId, int currentTime)
	{
		for (ProceessInterruptedModel item : QueuePool.getInterruptedProcesses()) {
			if(item.ProcessId == processId) {
				item.InterruptedTime = currentTime;
				return true;
			}
		}
		return false;
	}
}
